package pl.edu.pjatk.tau.dao;

import static org.junit.Assert.*;

import org.junit.*;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import pl.edu.pjatk.tau.domain.Player;
import java.sql.*;
import static org.hamcrest.CoreMatchers.*;

import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

@RunWith(JUnit4.class)
public class PlayerDaoTest {
    private static final Logger LOGGER = Logger.getLogger(PlayerDaoTest.class.getCanonicalName());
    public static String url = "jdbc:hsqldb:hsql://localhost/workdb";

    PlayerDao playerManager;
    List<Player> expectedDbState;

    @Before
    public void setup() throws SQLException {
        Connection connection = DriverManager.getConnection(url);
        try {
            connection.createStatement()
                    .executeUpdate("CREATE TABLE " +
                            "Player(id bigint GENERATED BY DEFAULT AS IDENTITY, "
                            + "name varchar(20) NOT NULL, "
                            + "level INTEGER, "
                            + "heroclass varchar(20))");

        } catch (SQLException e) {}

        Random rand = new Random();
        PreparedStatement addPlayerStmt = connection.prepareStatement(
                "INSERT INTO Player (name, level, heroclass) VALUES (?, ?, ?)",
                Statement.RETURN_GENERATED_KEYS);

        expectedDbState = new LinkedList<Player>();
        for (int i = 0; i < 10; i++) {
            Player player = new Player("Heoic Hero " + rand.nextInt(9999), rand.nextInt(100), "Knight tier " + rand.nextInt(9));
            try {
                addPlayerStmt.setString(1, player.getName());
                addPlayerStmt.setInt(2, player.getLevel());
                addPlayerStmt.setString(3, player.getHeroClass());
                addPlayerStmt.executeUpdate();
                ResultSet generatedKeys = addPlayerStmt.getGeneratedKeys();
                if (generatedKeys.next()) {
                    player.setId(generatedKeys.getLong(1));
                }
            } catch (SQLException e) {
                throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
            }

            expectedDbState.add(player);
        }
        playerManager = new PlayerDaoJdbcImpl(connection);
    }

    @After
    public void cleanup() throws SQLException{
        Connection connection = DriverManager.getConnection(url);
        try {
            connection.prepareStatement("DELETE FROM Player").executeUpdate();
        } catch (Exception e) {
            LOGGER.log(Level.FINEST,"Probably the database was not yet initialized");
        }
    }

    @Test
    public void checkAdding() throws Exception {
        Player player = new Player();
        player.setName("Adam");
        player.setLevel(39);
        player.setHeroClass("Archer tier 1");

        assertEquals(1, playerManager.addPlayer(player));

        expectedDbState.add(player);
        assertThat(playerManager.getAllPlayers(), equalTo(expectedDbState));
    }

    @Test
    public void checkGetting() throws Exception {
        Player player = expectedDbState.get(5);
        assertEquals(player, playerManager.getPlayer(player.getId()));
    }

    @Test(expected = SQLException.class)
    public void checkDeleting() throws SQLException {
        Player player = expectedDbState.get(3);
        expectedDbState.remove(player);
        assertEquals(1, playerManager.deletePlayer(player));
        assertThat(playerManager.getAllPlayers(), equalTo(expectedDbState));
        assertNull(playerManager.getPlayer(player.getId()));
    }

    @Test()
    public void checkDeletingSuccess() throws SQLException {
        Player p = expectedDbState.get(3);
        expectedDbState.remove(p);
        playerManager.deletePlayer(p);
        assertThat(playerManager.getAllPlayers(), equalTo(expectedDbState));
    }

    @Test()
    public void checkUpdatingSuccess() throws SQLException {
        Player player = expectedDbState.get(3);
        player.setName("Tyrael");
        player.setLevel(99);
        player.setHeroClass("Paladin tier 9");
        expectedDbState.set(3, player);
        assertEquals(1, playerManager.updatePlayer(player));
        assertThat(playerManager.getAllPlayers(), equalTo(expectedDbState));
    }

    @Test(expected = SQLException.class)
    public void checkUpdatingFailure() throws SQLException {
        Player player = new Player("test",10,"test");
        assertEquals(1, playerManager.updatePlayer(player));
    }

}