package pl.edu.pjatk.tau.dao;

import pl.edu.pjatk.tau.dao.PlayerDao;
import pl.edu.pjatk.tau.domain.Player;

import java.sql.*;
import java.util.LinkedList;
import java.util.List;

public class PlayerDaoJdbcImpl implements PlayerDao {

    private Connection connection;

    private PreparedStatement addPlayerStmt;
    private PreparedStatement getAllPlayersStmt;
    private PreparedStatement deletePlayerStmt;
    private PreparedStatement getPlayerStmt;
    private PreparedStatement updatePlayerStmt;

    public PlayerDaoJdbcImpl(Connection connection) throws SQLException {
        this.connection = connection;
//        if (!isDatabaseReady()) {
//            createTables();
//        }
        setConnection(connection);
    }

    public PlayerDaoJdbcImpl() throws SQLException {
    }

    public void createTables() throws SQLException {
        connection.createStatement()
                .executeUpdate("CREATE TABLE " +
                        "Player(id bigint GENERATED BY DEFAULT AS IDENTITY, "
                        + "name varchar(20) NOT NULL, " + "level integer)");
    }

    private boolean isDatabaseReady() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Player".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            return tableExists;
        } catch (SQLException e) {
            return false;
        }
    }

    @Override
    public int addPlayer(Player player) {
        int count = 0;
        try {
            addPlayerStmt.setString(1, player.getName());
            addPlayerStmt.setInt(2, player.getLevel());
            count = addPlayerStmt.executeUpdate();
            ResultSet generatedKeys = addPlayerStmt.getGeneratedKeys();
            if (generatedKeys.next()) {
                player.setId(generatedKeys.getLong(1));
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }

    public List<Player> getAllPlayers() {
        List<Player> players = new LinkedList<>();
        try {
            ResultSet rs = getAllPlayersStmt.executeQuery();

            while (rs.next()) {
                Player p = new Player();
                p.setId(rs.getInt("id"));
                p.setName(rs.getString("name"));
                p.setLevel(rs.getInt("level"));
                players.add(p);
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return players;
    }

    @Override
    public Connection getConnection() {
        return connection;
    }

    public void setConnection(Connection connection) throws SQLException {
        this.connection = connection;
        addPlayerStmt = connection.prepareStatement(
            "INSERT INTO Player (name, level) VALUES (?, ?)",
                Statement.RETURN_GENERATED_KEYS);
        deletePlayerStmt = connection.prepareStatement("DELETE FROM Player where id = ?");
        getAllPlayersStmt = connection.prepareStatement("SELECT id, name, level FROM Player ORDER BY id");
        getPlayerStmt = connection.prepareStatement("SELECT id, name, level FROM Player WHERE id = ?");
        updatePlayerStmt = connection.prepareStatement("UPDATE Player SET name=?,level=? WHERE id = ?");
    }

    @Override
    public int deletePlayer(Player player) {
        try {
            deletePlayerStmt.setLong(1, player.getId());
            return deletePlayerStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
    }

    @Override
    public int updatePlayer(Player player) throws SQLException {
        int count = 0;
        try {
            updatePlayerStmt.setString(1, player.getName());
            updatePlayerStmt.setInt(2, player.getLevel());
            if (player.getId() != null) {
                updatePlayerStmt.setLong(3, player.getId());
            } else {
                updatePlayerStmt.setLong(3, -1);
            }
            count = updatePlayerStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        if (count <= 0)
            throw new SQLException("Player not found for update");
        return count;
    }

    @Override
    public Player getPlayer(long id) throws SQLException {
        try {
            getPlayerStmt.setLong(1, id);
            ResultSet rs = getPlayerStmt.executeQuery();

            if (rs.next()) {
                Player p = new Player();
                p.setId(rs.getInt("id"));
                p.setName(rs.getString("name"));
                p.setLevel(rs.getInt("level"));
                return p;
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        throw new SQLException("Player with id " + id + " does not exist");
    }
}